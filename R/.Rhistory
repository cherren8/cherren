sd <- sd[order(as.Date(names(sd), format = "%m/%d/%Y"))]
segments(x, y-sd , x, y+sd)
epsilon = 0.2
segments(x-epsilon,y-sd,x+epsilon,y-sd)
segments(x-epsilon,y+sd,x+epsilon,y+sd)
#Add error bars
x1 <- seq(1:length(ch.plot))
y1 <- ch.plot + 1
sd1 <- tapply(cc$ch.adj * (1 / (pi*0.026^2)), cc$sampledate, sd) / sqrt(tapply(cc$ch.adj, cc$sampledate, length))
sd1 <- sd1[order(as.Date(names(sd1), format = "%m/%d/%Y"))]
segments(x1, y1-sd1 , x1, y1+sd1, lwd = 3)
epsilon = 0.2
segments(x1-epsilon,y1-sd1,x1+epsilon,y1-sd1, lwd = 2)
segments(x1-epsilon,y1+sd1,x1+epsilon,y1+sd1, lwd = 2)
#construct boxplot showing effect of 10^5 ch and tt on productivity
#model_each_g is the correct one to use
boxplot(coef(model_each_g)[2:3]*5 ~ c(1, 2), xaxt = "n", ylab = c(expression(paste(paste("Change in O" [2]), " production (mg " ,  "Â· m " ^ "-2", "Â· h " ^ "-1", ")" )) )  , ylim = c(-200, 200), cex.lab = 1.3 )
axis(side = 1, at=c(1, 2), labels=c(expression(italic("T. gracilentus")), expression(italic("C. islandicus"))), cex.axis = 1.2)
abline(0, 0, lty = 2, lwd = 2)
#Add error bars
x2 <- seq(1:2)
y2 <- coef(model_each_g)[2:3]*5
sd2 <- coef(summary(model_each_g))[2:3, 2] * 5
segments(x2, y2-sd2 , x2, y2+sd2, lwd = 3)
epsilon = 0.12
segments(x2-epsilon,y2-sd2,x2+epsilon,y2-sd2, lwd = 2)
segments(x2-epsilon,y2+sd2,x2+epsilon,y2+sd2, lwd = 2)
#add panel labels
text(x = .85, y = 150, "b", cex = 4)
##################################################################################
##################################################################################
#
# #compare boxplots of productivity to boxplots of chiron and tanyt
# par(mfrow = c(1,1))
# boxplot(tot_prod_all ~ as.Date(names(tot_prod_all), format = "%m/%d/%Y") )
#
# #look at means, rather than boxplot
# mean.date.prod <- tapply(tot_prod_all, names(tot_prod_all), mean)
# plot( mean.date.prod , ylim = c(0, 1.1), pch = 20)
# points(log(tt.plot + 1) / max(log(tt.plot + 1)), col = "blue", pch = 20)
#
# plot(tot_prod_all ~ log10(tt_each + 1) , cex = .3, pch = 20)
# abline(lm(tot_prod_all ~ log10(tt_each + 1) ), lwd = 2)
# points(tot_prod_all ~ log10(ch_each + 1), col = "red" , cex = .3, pch = 20)
# abline(lm(tot_prod_all ~ log10(ch_each + 1)), lwd = 2, col = "red")
#
View(cc)
cc$tt_adj_m2 <- cc$tt_adj * (1/ ((0.026^2)*pi))
cc$ch_adj_m2 <- cc$ch_adj * (1/ ((0.026^2)*pi))
View(cc)
max(sum(cc$tt_adj_m2 + cc$ch_adj_m2))
max((cc$tt_adj_m2 + cc$ch_adj_m2))
max(cc$ch_acj_m2)
max(cc$ch_adj_m2)
View(s)
tapply(s$NH4, s$Spp, mean )
tapply(s$AllN, s$Spp, mean )
# Analyze nutrient water chemistry data for larval incubations
# 5 Feb 2015
n <- read.csv("~/Desktop/UWMadison/Myvatn/Myvatn2014/MidgeMesocosms/Data/NH4LarvalIncubations5Feb15.csv", header = T)
n$NH4PerMg <- n$NH4 / n$IndivWeight
n$AllN <- n$NO + n$NH4
n$SRPPerMg <- n$SRP/ n$IndivWeight
n$SiPerMg <- n$Si/ n$IndivWeight
n$NPerMg <- n$AllN/ n$IndivWeight
boxplot(n$NH4PerMg ~ n$Spp)
plot(n$NH4PerMg ~ as.numeric(n$Spp), pch = 1, cex = 1 )
#Check for differences in NH4 excretion
summary(lm(n$NH4 ~ n$Spp)) #not significant by indiv
summary(lm(n$NH4PerMg ~ n$Spp)) #TT excretes more per mg dry
#Check for differences in soluble nitrogen excretion
summary(lm(n$AllN ~ n$Spp)) #not significant by indiv
summary(lm(n$NPerMg ~ n$Spp)) #TT excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(n$SRP ~ n$Spp)) #very significant by indiv
summary(lm(n$SRPPerMg ~ n$Spp)) #tt excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(n$Si ~ n$Spp)) #very significant by indiv
summary(lm(n$SiPerMg ~ n$Spp)) #tt excretes more per mg dry
########### Plot NO3 ratio to NH4 to justify taking out one point
n$Nratio <- n$NO/ n$NH4
n$SRPtoNH4 <- n$SRP/n$NH4
plot(n$NO / n$NH4 ~ n$Spp) #that point is CLEARLY an outlier
plot(n$SRPtoNH4 ~ n$Spp)
##use outliers test on the data, if justifying taking out CH1
library(outliers)
#test for outliers in NO to NH4 data
dixon.test(n$Nratio[n$Spp == "ch"]) #high value is given as an outlier
dixon.test(n$Nratio[n$Spp == "tt"]) #no outliers
#test for outliers in SRP to NH4 data
dixon.test(n$SRPtoNH4[n$Spp == "ch"]) #high value is given as an outlier
dixon.test(n$SRPtoNH4[n$Spp == "tt"]) #no outliers
#Calculate amount of nitrogen in the form of NH4
sum(s$NH4) / sum(s$AllN)
#take out Ch1 because it's an outlier and because NO2/NO3 reading is also weird
s <- n[-1, ]
s.orig <- s
#convert rates to mg per day
s[,11:20] <- s[11:20]*6 * .1
#Check for differences in nitrogen excretion
summary(lm(s$NH4 ~ 0 + s$Spp)) #get trt estimates
summary(lm(s$NH4 ~ s$Spp)) #significant by individual
summary(lm(s$NH4PerMg ~ s$Spp)) #barely not significant by weight
#Check for differences in soluble nitrogen excretion. Multiply by 10 to get ug per individual per day.
summary(lm(s$AllN*10 ~ 0 + s$Spp))
summary(lm(s$AllN*10 ~  s$Spp)) #significant by individual
summary(lm(s$NPerMg*10 ~ 0 + s$Spp))
summary(lm(s$NPerMg*10 ~ s$Spp)) #TT excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(s$SRP*10 ~ 0 + s$Spp))
summary(lm(s$SRP*10 ~ s$Spp)) #very significant by indiv
summary(lm(s$SRPPerMg*10 ~ 0 + s$Spp))
summary(lm(s$SRPPerMg*10 ~ s$Spp)) #tt excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(s$Si*10 ~ 0 + s$Spp))
summary(lm(s$Si*10 ~ s$Spp)) #significant by indiv
summary(lm(s$SiPerMg*10 ~ 0 + s$Spp))
summary(lm(s$SiPerMg*10 ~ s$Spp)) #tt excretes more per mg dry
#Decide to throw out one Chironomus data point
###########################Calculate mean NH4, N, SRP, and Si excretion by taxon
#max single sample density of tt is 431,000/m2
#max single sample density of ch is 129,000/m2
#max average density of tt is 314,000/m2
#max average density of ch is 112,000/m2
tapply(s$NH4, s$Spp, mean )
#ch is 0.171 and tt is 0.0546
#calculate max NH4 - N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.0546 * .1  * 431000 / 100 * (24/4)
## = 102 mg NH4-N for max mean density ; 141 mg NH4-N for max sample density (181 mg NH4)
##Use tt for cycling estimates, because tt at this sample point were 4th instar
#calculate max NH4 - N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.171 * .1  * 129000 / 100 * (24/4)
## = 132 mg/m2/day for max sample density (170 mh NH4)
tapply(s$AllN, s$Spp, mean )
View(n)
sum(s$NH4) / sum(s$AllN)
summary(lm(s$NH4 ~ 0 + s$Spp)) #get trt estimates
summary(lm(s$AllN*10 ~ 0 + s$Spp))
s$AllN
summary(lm(s$NH4 ~ 0 + s$Spp)) #get trt estimates
View(n)
summary(lm(s$AllN*6 ~ 0 + s$Spp))
summary(lm(s$AllN*6 ~ 0 + s$Spp))
summary(lm(s$AllN*6 ~  s$Spp)) #significant by individual
summary(lm(s$AllN*6 ~ 0 + s$Spp))
summary(lm(s$SRP*6 ~ 0 + s$Spp))
summary(lm(s$Si*6 ~ 0 + s$Spp))
summary(lm(s$NPerMg*6 ~ 0 + s$Spp))
summary(lm(s$SRPPerMg*6 ~ 0 + s$Spp))
summary(lm(s$SiPerMg*6 ~ 0 + s$Spp))
summary(lm(s$SRPPerMg*6 ~ 0 + s$Spp))
0.23*430000
(0.23*430000)/ (1000*1000)
AllN*6
summary(lm(s$AllN*6 ~ 0 + s$Spp))
View(n)
.22*(430000/100)
(.22*(430000/100) )/ 1000
((.22*(430000/100) )/ 1000 )/ 10
# Analyze nutrient water chemistry data for larval incubations
# 5 Feb 2015
n <- read.csv("~/Desktop/UWMadison/Myvatn/Myvatn2014/MidgeMesocosms/Data/NH4LarvalIncubations5Feb15.csv", header = T)
n$NH4PerMg <- n$NH4 / n$IndivWeight
n$AllN <- n$NO + n$NH4
n$SRPPerMg <- n$SRP/ n$IndivWeight
n$SiPerMg <- n$Si/ n$IndivWeight
n$NPerMg <- n$AllN/ n$IndivWeight
boxplot(n$NH4PerMg ~ n$Spp)
plot(n$NH4PerMg ~ as.numeric(n$Spp), pch = 1, cex = 1 )
#Check for differences in NH4 excretion
summary(lm(n$NH4 ~ n$Spp)) #not significant by indiv
summary(lm(n$NH4PerMg ~ n$Spp)) #TT excretes more per mg dry
#Check for differences in soluble nitrogen excretion
summary(lm(n$AllN ~ n$Spp)) #not significant by indiv
summary(lm(n$NPerMg ~ n$Spp)) #TT excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(n$SRP ~ n$Spp)) #very significant by indiv
summary(lm(n$SRPPerMg ~ n$Spp)) #tt excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(n$Si ~ n$Spp)) #very significant by indiv
summary(lm(n$SiPerMg ~ n$Spp)) #tt excretes more per mg dry
########### Plot NO3 ratio to NH4 to justify taking out one point
n$Nratio <- n$NO/ n$NH4
n$SRPtoNH4 <- n$SRP/n$NH4
plot(n$NO / n$NH4 ~ n$Spp) #that point is CLEARLY an outlier
plot(n$SRPtoNH4 ~ n$Spp)
##use outliers test on the data, if justifying taking out CH1
library(outliers)
#test for outliers in NO to NH4 data
dixon.test(n$Nratio[n$Spp == "ch"]) #high value is given as an outlier
dixon.test(n$Nratio[n$Spp == "tt"]) #no outliers
#test for outliers in SRP to NH4 data
dixon.test(n$SRPtoNH4[n$Spp == "ch"]) #high value is given as an outlier
dixon.test(n$SRPtoNH4[n$Spp == "tt"]) #no outliers
#take out Ch1 because it's an outlier and because NO2/NO3 reading is also weird
s <- n[-1, ]
s.orig <- s
#convert rates to mg per day
s[,11:20] <- s[11:20]*6 * .1
#Calculate amount of nitrogen in the form of NH4
sum(s$NH4) / sum(s$AllN)
#Check for differences in nitrogen excretion
summary(lm(s$NH4 ~ 0 + s$Spp)) #get trt estimates
summary(lm(s$NH4 ~ s$Spp)) #significant by individual
summary(lm(s$NH4PerMg ~ s$Spp)) #barely not significant by weight
#Check for differences in soluble nitrogen excretion.
#Divide by 10 to get amt N. divide by 100 to get per indiv. multiply by 1000 to get from mg to ug.
#multiply by 6 to go from 4 hr to 24 hr
summary(lm(s$AllN*6 ~ 0 + s$Spp))
summary(lm(s$AllN*6 ~  s$Spp)) #significant by individual
summary(lm(s$NPerMg*6 ~ 0 + s$Spp))
summary(lm(s$NPerMg*6 ~ s$Spp)) #TT excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(s$SRP*6 ~ 0 + s$Spp))
summary(lm(s$SRP*6 ~ s$Spp)) #very significant by indiv
summary(lm(s$SRPPerMg*6 ~ 0 + s$Spp))
summary(lm(s$SRPPerMg*6 ~ s$Spp)) #tt excretes more per mg dry
#Check for differences in phosphorus excretion
summary(lm(s$Si*6 ~ 0 + s$Spp))
summary(lm(s$Si*6 ~ s$Spp)) #significant by indiv
summary(lm(s$SiPerMg*6 ~ 0 + s$Spp))
summary(lm(s$SiPerMg*6 ~ s$Spp)) #tt excretes more per mg dry
#Decide to throw out one Chironomus data point
###########################Calculate mean NH4, N, SRP, and Si excretion by taxon
#max single sample density of tt is 431,000/m2
#max single sample density of ch is 129,000/m2
#max average density of tt is 314,000/m2
#max average density of ch is 112,000/m2
tapply(s$NH4, s$Spp, mean )
#ch is 0.171 and tt is 0.0546
#calculate max NH4 - N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.0546 * .1  * 431000 / 100 * (24/4)
## = 102 mg NH4-N for max mean density ; 141 mg NH4-N for max sample density (181 mg NH4)
##Use tt for cycling estimates, because tt at this sample point were 4th instar
#calculate max NH4 - N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.171 * .1  * 129000 / 100 * (24/4)
## = 132 mg/m2/day for max sample density (170 mh NH4)
tapply(s$AllN, s$Spp, mean )
#ch is 0.1755 and tt is 0.063
#calculate max total N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.063 * .1  * 431000 / 100 * (24/4)
## 163 mg N per m2 per day.
#calculate max total N excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.1755 * .1  * 129000 / 100 * (24/4)
## = 136 mgN/m2/day
tapply(s$SRP, s$Spp, mean )
#ch is 0.043 and tt is 0.0174
#calculate max SRP excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.0174 * .1  * 431000 / 100 * (24/4)
## 45.0 mg P per m2 per day.
#calculate max SRP excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.043 * .1  * 129000 / 100 * (24/4)
## = 33.3 mgP/m2/day
#Takes about 33 days for larvae to cycle entire year's input of P
tapply(s$Si, s$Spp, mean )
#ch is 0.0825 and tt is 0.042
#calculate max SI excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.042 * .1  * 431000 / 100 * (24/4)
## 109 mg Si per m2 per day.
#calculate max Si excretion per day for tt
## mg/ L * (100mL / 1000mL) * max tt / tt in container * (24 hrs / 4 hrs )
.0825 * .1  * 129000 / 100 * (24/4)
## = 63.9 mgSi/m2/day
#Use 9 Aug 2014 date for highest tt and ch abundance
#tt abundance is 314,000 per m2 and ch abundance is 3,400 per m2
#for max single sample TT abundance, ch abundance is 7,533 per m2
#calculate max NH4 - N excretion per day for whole community
(.063 * .1  * 431000 / 100 * (24/4) ) + (.1755 * .1  * 7500 / 100 * (24/4) )
tapply(s$SRP, s$Spp, mean )
tapply(s$AllN, s$Spp, mean )
View(n)
0.38*438000
(0.38*438000 ) / (1000*1000)
(1.05*7500 ) / (1000*1000)
(0.38*438000 ) / (1000*1000) + (1.05*7500 ) / (1000*1000)
1.4/.174
View(c)
View(cc)
1.4 / ( (0.38*431000 ) / (1000*1000) + (1.05*7500 ) / (1000*1000) ) # = 0.174
summary(lm(s$AllN*10 ~ 0 + s$Spp))
signed.mean <- function(vector, type){
if(type != "pos" & type != "neg"){break}
if(length(vector) == 0){break}
ifelse(type == "pos", vals <- vector[vector > 0], vals <- vector[vector < 0])
n.mean <- sum(vals) / length(vector)
return(n.mean)
}
signed.mean(c(0, 1, 1, 5), type = "neg")
signed.mean(c(0, 1, 1, 5), type = "pos")
signed.mean(c(0, 1, 1, 5), type = "p")
signed.mean(c(), type = "pos")
setwd("~/Desktop/UWMadison/Classes/ToolsForRR/R")
install.packages(devtools)
install.packages("devtools")
library(devtools)
build()
setwd("~/Desktop/UWMadison/Classes/ToolsForRR/cherren/R")
build()
build(cherren)
build(signed.mean)
build(signed.mean)
build()
build("~/Desktop/UWMadison/Classes/ToolsForRR/cherren")
build("~/Desktop/UWMadison/Classes/ToolsForRR/cherren/R")
build("~/Desktop/UWMadison/Classes/ToolsForRR/cherren/R")
build()
build()
build()
build()
build()
build()
setwd("~/Desktop/UWMadison/Classes/ToolsForRR/cherren/R")
build()
build()
build()
document()
document()
install()
document()
install()
document()
install.packages("roxygen2")
document()
document()
build()
install()
document()
document()
document()
#' take average of positive or negative values
#'
#' this function averages positive or negative values over the entire length of the input vector
#'
#' @param vector input vector to be averaged
#' @param type string; either "pos" or "neg"
#'
#' @return n.mean averaged positive or negative values from the vector
#'
#' @examples
#' signed.mean()
#'
#' @export
signed.mean <- function(vector, type){
if(type != "pos" & type != "neg"){break}
if(length(vector) == 0){break}
ifelse(type == "pos", vals <- vector[vector > 0], vals <- vector[vector < 0])
n.mean <- sum(vals) / length(vector)
return(n.mean)
}
document()
document()
document()
document()
document()
document()
document()
build()
install()
document()
document()
document()
build()
install()
document()
document()
document()
document()
document()
document()
document()
document()
vector <- floor(rnorm(10, 0, 5))
set.seed(509390770)
vector <- floor(rnorm(10, 0, 5))
signed.mean(vector, type = "pos")
### Happy coding!
```{r knitr_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RmdFigs/',
warning=FALSE, message=FALSE)
```
This is a tutorial to accompany the function signed.mean in the package cherren.
### Function Description
The function signed.mean takes the arugments `vector` and `type`. The `vector` argument contains the entire set of values, both positive and negative. The `type` argument should be either `"pos"` or `"neg"`, depending on whether the returned average should be of the positive or negative values.
### Example of Function Utility
I originally designed this function to take a vector of interaction strengths between different species and return the "average" positive or negative interaction strength between one species and all other species. Dividing by the total number of species interactions gave a good indicator of overall positive or negative interaction strength. This is the reason why the function divides the sum of all positive (or negative) values by the total length of the vector, rather than strictly averaging just the positive (or negative) values.
### Using the Function
First, generate a vector with mixed positive and negative values to send to the function.
```{r generate_vector}
set.seed(509390770)
vector <- floor(rnorm(10, 0, 5))
```
Note that the initial length of the vector:
```{r length_vector}
length(vector)
```
Send the vector to the function, along with either `"pos"` or `"neg"` as the argument `type`
```{r use_fxn1}
signed.mean(vector, type = "pos")
signed.mean(vector, type = "neg")
```
Again, note that the returned value from the function run with `type = "pos"` gives `signed.mean(vector, type = "pos")`, which is the sum of all positive values divided by the length of the original vector. Similarly, the signed.mean function run with `type = "neg"` gives `signed.mean(vector, type = "neg")`.
### Happy coding!
This is a tutorial to accompany the function signed.mean in the package cherren.
```{r knitr_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RmdFigs/',
warning=FALSE, message=FALSE)
```
### Function Description
The function signed.mean takes the arugments `vector` and `type`. The `vector` argument contains the entire set of values, both positive and negative. The `type` argument should be either `"pos"` or `"neg"`, depending on whether the returned average should be of the positive or negative values.
### Example of Function Utility
I originally designed this function to take a vector of interaction strengths between different species and return the "average" positive or negative interaction strength between one species and all other species. Dividing by the total number of species interactions gave a good indicator of overall positive or negative interaction strength. This is the reason why the function divides the sum of all positive (or negative) values by the total length of the vector, rather than strictly averaging just the positive (or negative) values.
### Using the Function
First, generate a vector with mixed positive and negative values to send to the function.
```{r generate_vector}
set.seed(509390770)
vector <- floor(rnorm(10, 0, 5))
```
Note that the initial length of the vector:
```{r length_vector}
length(vector)
```
Send the vector to the function, along with either `"pos"` or `"neg"` as the argument `type`
```{r use_fxn1}
signed.mean(vector, type = "pos")
signed.mean(vector, type = "neg")
```
Again, note that the returned value from the function run with `type = "pos"` gives `signed.mean(vector, type = "pos")`, which is the sum of all positive values divided by the length of the original vector. Similarly, the signed.mean function run with `type = "neg"` gives `signed.mean(vector, type = "neg")`.
### Happy coding!
This is a portion of the "[A shorter tour of R/qtl](http://www.rqtl.org/rqtltour2.pdf)"
tutorial, developed here in multiple formats to illustrate the use of knitr.
This particular document is written with [R Markdown](http://www.rstudio.com/ide/docs/r_markdown).
(Also see the [Markdown](http://daringfireball.net/projects/markdown/)
site.)
```{r knitr_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RmdFigs/',
warning=FALSE, message=FALSE)
set.seed(53079239)
# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")
install.packages("knitr")
library(devtools)
library(roxygen2)
# signed.mean
#'take average of positive or negative values.
#'
#'this function averages positive or negative values over the entire length of the input vector.
#'
#'@param vector input vector to be averaged.
#'@param type string; either "pos" or "neg".
#'
#'@return n.mean averaged positive or negative values from the vector.
#'@export
#'
#'@examples
#'signed.mean(c(0, -1, 2, 5), type = "pos").
#'
signed.mean <-
function(vector, type)
{
if(type != "pos" & type != "neg"){break}
if(length(vector) == 0){break}
ifelse(type == "pos", vals <- vector[vector > 0], vals <- vector[vector < 0])
n.mean <- sum(vals) / length(vector)
return(n.mean)
}
build()
install()
document()
This is a tutorial to accompany the function signed.mean in the package cherren.
```{r knitr_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.width=12, fig.height=4, fig.path='RmdFigs/',
warning=FALSE, message=FALSE)
```
### Function Description
The function signed.mean takes the arugments `vector` and `type`. The `vector` argument contains the entire set of values, both positive and negative. The `type` argument should be either `"pos"` or `"neg"`, depending on whether the returned average should be of the positive or negative values.
### Example of Function Utility
I originally designed this function to take a vector of interaction strengths between different species and return the "average" positive or negative interaction strength between one species and all other species. Dividing by the total number of species interactions gave a good indicator of overall positive or negative interaction strength. This is the reason why the function divides the sum of all positive (or negative) values by the total length of the vector, rather than strictly averaging just the positive (or negative) values.
### Using the Function
First, generate a vector with mixed positive and negative values to send to the function.
```{r generate_vector}
set.seed(509390770)
vector <- floor(rnorm(10, 0, 5))
```
Note that the initial length of the vector:
```{r length_vector}
length(vector)
```
Send the vector to the function, along with either `"pos"` or `"neg"` as the argument `type`
```{r use_fxn1}
signed.mean(vector, type = "pos")
signed.mean(vector, type = "neg")
```
Again, note that the returned value from the function run with `type = "pos"` gives `signed.mean(vector, type = "pos")`, which is the sum of all positive values divided by the length of the original vector. Similarly, the signed.mean function run with `type = "neg"` gives `signed.mean(vector, type = "neg")`.
### Happy coding!
### Preliminaries
To install R/qtl, you need to first install the package.
Type (within R) `install.packages("qtl")`
(This needs to be done just once.)
library(knitr)
